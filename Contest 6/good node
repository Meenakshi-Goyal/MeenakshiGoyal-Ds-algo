import java.io.*;
import java.util.*;

class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}

class lcs {
    
    static Node buildTree(String str){
        
        if(str.length()==0 || str.charAt(0)=='N'){
            return null;
        }
        
        String ip[] = str.split(" ");
       
        Node root = new Node(Integer.parseInt(ip[0]));
        
        
        Queue<Node> queue = new LinkedList<>(); 
        
        queue.add(root);
     
        
        int i = 1;
        while(queue.size()>0 && i < ip.length) {
            
         
            Node currNode = queue.peek();
            queue.remove();
                
            
            String currVal = ip[i];
                
           
            if(!currVal.equals("N")) {
                    
                
                currNode.left = new Node(Integer.parseInt(currVal));
               
                queue.add(currNode.left);
            }
                
           
            i++;
            if(i >= ip.length)
                break;
                
            currVal = ip[i];
                
           
            if(!currVal.equals("N")) {
                    
               
                currNode.right = new Node(Integer.parseInt(currVal));
                    
               
                queue.add(currNode.right);
            }
            i++;
        }
        
        return root;
    }
    static void printInorder(Node root)
    {
        if(root == null)
            return;
            
        printInorder(root.left);
        System.out.print(root.data+" ");
        
        printInorder(root.right);
    }
    
	public static void main (String[] args) throws IOException{
	        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	        
	        int t=Integer.parseInt(br.readLine());
    
	        while(t-- > 0){
	            String input[] = br.readLine().trim().split(" ");
                int a = Integer.parseInt(input[0]);
                int b = Integer.parseInt(input[1]);
	            String s = br.readLine();
    	    	Node root = buildTree(s);
                Tree g = new Tree();
                Node k = g.good(root);
    			System.out.println(k.data);
    	        
	        }
	}
}
class good{
public int good(Node root) {
	return countnodes(root, root.data);
}

private int countnodes(Node node, int max) {
	if (node == null) {
		return 0;
	}
	
	int count = 0;
	if (node.data >= max) {
		max = node.val;
		count = 1;
	}
	return count + countnodes(node.left, max) + good(node.right, max);
}

}
